import asyncio
import os
import requests
import logging
from telethon import TelegramClient
from telethon.tl.types import Message
from dotenv import load_dotenv
from extract_with_gemini import extract_fields_from_text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

api_id = int(os.getenv("TG_API_ID"))
api_hash = os.getenv("TG_API_HASH")
channels = ["jobforjunior", "remotejobss", "forfrontend", "forallqa", "fordesigner", "forproducts"]

client = TelegramClient("tg_session", api_id, api_hash)

FASTAPI_URL = "http://backend:8000/jobs"

def check_backend():
    try:
        response = requests.get("http://backend:8000/")
        if response.status_code == 200:
            logger.info("‚úÖ Backend is available")
            return True
        else:
            logger.error(f"‚ùå Backend returned status code: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå Cannot connect to backend: {e}")
        return False

def post_job(data):
    try:
        response = requests.post(FASTAPI_URL, json=data)
        if response.status_code == 200:
            logger.info(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {data['title']}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

async def main():
    try:
        await client.start()
        logger.info("üîå Connected to Telegram!")

        if not check_backend():
            logger.error("‚ùå Backend is not available, exiting...")
            return

        for ch in channels:
            logger.info(f"\nüì° –ß—Ç–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {ch}")
            try:
                async for message in client.iter_messages(ch, limit=3):
                    if isinstance(message, Message) and message.message:
                        lines = message.message.strip().split("\n", 1)
                        title = lines[0][:100] if lines else "No Title"
                        description = lines[1] if len(lines) > 1 else ""

                        logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {title}")

                        try:
                            fields = extract_fields_from_text(description)
                            logger.info(f"‚ú® –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {fields}")
                            await asyncio.sleep(5)  # ‚è±Ô∏è –∑–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–º–∏—Ç–æ–≤ Gemini
                        except Exception as e:
                            logger.error(f"‚ùå Gemini parse error: {e}")
                            fields = {}

                        data = {
                            "title": title.strip(),
                            "description": description.strip(),
                            "source": "telegram",
                            "link": None,
                            "salary": fields.get("salary"),
                            "location": fields.get("location"),
                            "deadline": fields.get("deadline"),
                            "format": fields.get("format"),
                            "work_time": fields.get("work_time"),
                            "industry": fields.get("industry"),
                        }

                        post_job(data)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {ch}: {e}")

    except Exception as e:
        logger.error(f"‚ùå Critical error: {e}")
    finally:
        await client.disconnect()
        logger.info("üëã Disconnected from Telegram")


