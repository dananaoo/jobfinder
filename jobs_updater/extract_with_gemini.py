import os
import re
import json
import logging
from dotenv import load_dotenv
import google.generativeai as genai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    logger.error("‚ùå GEMINI_API_KEY not found in environment variables")
    raise ValueError("GEMINI_API_KEY is required")

genai.configure(api_key=api_key)

try:
    model = genai.GenerativeModel("models/gemini-1.5-flash")
    logger.info("‚úÖ Gemini model initialized successfully")
except Exception as e:
    logger.error(f"‚ùå Failed to initialize Gemini model: {e}")
    raise

def extract_fields_from_text(text: str) -> dict:
    if not text:
        logger.warning("‚ö†Ô∏è Empty text provided to extract_fields_from_text")
        return {}

    prompt = f"""
–¢—ã ‚Äî AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å:
- salary: —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç—ã, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)
- location: —Å—Ç—Ä–æ–∫–∞ (–≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∞)
- deadline: —Å—Ç—Ä–æ–∫–∞ (–¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)
- format: —Å—Ç—Ä–æ–∫–∞ (–æ–Ω–ª–∞–π–Ω / –æ—Ñ–ª–∞–π–Ω / –≥–∏–±—Ä–∏–¥)
- work_time: —Å—Ç—Ä–æ–∫–∞ (full-time / part-time / internship / freelance)
- industry: —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: IT, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ñ–∏–Ω–∞–Ω—Å—ã)

–í–æ—Ç —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:
{text}

–í–µ—Ä–Ω–∏ JSON —Å —ç—Ç–∏–º–∏ –∫–ª—é—á–∞–º–∏. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ null.
"""

    try:
        logger.info("ü§ñ Sending request to Gemini...")
        response = model.generate_content(prompt)
        
        if not response.text:
            logger.error("‚ùå Empty response from Gemini")
            return {}

        logger.info(f"üì• Raw response from Gemini: {response.text[:200]}...")
        
        json_match = re.search(r"\{.*\}", response.text, re.DOTALL)
        if not json_match:
            logger.error("‚ùå No JSON found in Gemini response")
            return {}
            
        json_str = json_match.group()
        result = json.loads(json_str)
        logger.info(f"‚ú® Successfully extracted fields: {result}")
        return result
        
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå Failed to parse JSON from Gemini response: {e}")
        return {}
    except Exception as e:
        logger.error(f"‚ùå Unexpected error in extract_fields_from_text: {e}")
        return {}
